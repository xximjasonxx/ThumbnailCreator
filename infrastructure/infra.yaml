AWSTemplateFormatVersion: 2010-09-09
Description: "Creates infrastructure for Thumnbail Creator"

Parameters:
  RawBucketName:
    Type: String
    Default: rawimages
    Description: Enter the name of the Raw Images Bucket

  ThumbnailBucketName:
    Type: String
    Default: thumbnailimages
    Description: Enter the name of the Thumbnail Images Bucket

  ApiGatewayName:
    Type: String
    Default: tcapigateway
    Description: Enter the name of the API Gateway

  CreateThumbnailLambdaVersionFile:
    Type: String
    Description: The file containing the compiled contents for the Lambda

  AnalyzeImageLambdaVersionFile:
    Type: String
    Description: The file containing the compiled contents for the Lambda

Resources:
  ThumbnailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ThumbnailBucketName

  ImageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Id"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "ImageDataTable2"

  CreateThumbnailFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "tc-createthumbnailfunctionrole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:Put*"
                Resource: "*"
              - Effect: "Allow"
                Action: "s3:Get*"
                Resource: "*"
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "cloudwatch:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "xray:*"
                Resource: "*"

  CreateThumbnailFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: thumbnailcreator-artifacts
        S3Key: !Ref CreateThumbnailLambdaVersionFile
      Handler: CreateThumbnailFunction::Functions.CreateThumbnailFunction::ExecuteAsync
      Runtime: dotnetcore2.1
      Role: !GetAtt CreateThumbnailFunctionRole.Arn
      TracingConfig:
        Mode: Active
      Timeout: 300
      Environment:
        Variables:
          ThumbnailBucketName: !Ref ThumbnailBucketName

  AnalyzeImageFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "tc-analyzeimagefunctionrole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:Get*"
                Resource: "*"
              - Effect: Allow
                Action: rekognition:DetectLabels
                Resource: "*"
              - Effect: Allow
                Action: "dynamodb:PutItem"
                Resource: "*"
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action: "cloudwatch:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "xray:*"
                Resource: "*"

  AnalyzeImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: thumbnailcreator-artifacts
        S3Key: !Ref AnalyzeImageLambdaVersionFile
      Handler: AnalyzeImageFunction::Functions.AnalyzeImageFunction::ExecuteAsync
      Runtime: dotnetcore2.1
      Role: !GetAtt AnalyzeImageFunctionRole.Arn
      TracingConfig:
        Mode: Active
      Timeout: 600
  
  ImageUploadTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ImageUploadTopic
      Subscription:
        - Endpoint: !GetAtt CreateThumbnailFunction.Arn
          Protocol: lambda
        - Endpoint: !GetAtt AnalyzeImageFunction.Arn
          Protocol: lambda

  ImageUploadTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: S3TopicPublishPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: S3PublishAllowStatement
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sns:Publish
            Resource: !Ref ImageUploadTopic
      Topics:
        - !Ref ImageUploadTopic
  
  RawBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref RawBucketName
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:*"
            Topic: !Ref ImageUploadTopic
  
  CreateThumbnailFunctionSNSInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateThumbnailFunction
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"

  AnalyzeImageFunctionSNSInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AnalyzeImageFunction
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
  
  ApiGatewayRest:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiGatewayName
      Description: Api Gateway to enable reading and writing of image data
      BinaryMediaTypes:
        - image/png
      EndpointConfiguration:
        Types:
          - REGIONAL
    DependsOn:
      - ImageTable

  BucketApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: !Ref RawBucketName
      RestApiId: !Ref ApiGatewayRest
      ParentId: !GetAtt ApiGatewayRest.RootResourceId
    DependsOn:
      - ApiGatewayRest

  ImagesApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: "all-images"
      RestApiId: !Ref ApiGatewayRest
      ParentId: !GetAtt ApiGatewayRest.RootResourceId
    DependsOn:
      - ApiGatewayRest

  BucketItemApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: "{item}"
      RestApiId: !Ref ApiGatewayRest
      ParentId: !Ref BucketApiResource

  BucketItemApiMethodRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
              Service: apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "tc-bucketitemmethodrole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:Put*"
                Resource: "*"

  BucketItemApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ResourceId: !Ref BucketItemApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      OperationName: SaveImage
      MethodResponses:
        - StatusCode: 201
      RequestParameters:
        method.request.header.Content-Disposition: false
        method.request.header.Content-Type: true
        method.request.path.item: true
      Integration:
        Type: AWS
        Credentials: !GetAtt BucketItemApiMethodRole.Arn
        IntegrationHttpMethod: PUT
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.header.Content-Disposition: method.request.header.Content-Disposition
          integration.request.header.Content-Type: method.request.header.Content-Type
          integration.request.path.key: method.request.path.item
        Uri:
          Fn::Join:
            - "/"
            - - "arn:aws:apigateway:us-east-1:s3:path"
              - !Ref RawBucketName
              - "{key}"
        IntegrationResponses:
          - StatusCode: 201

  ImagesApiMethodRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "tc-imagesapimethodrole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "dynamodb:Scan"
                Resource: "*"

  ImagesApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRest
      ResourceId: !Ref ImagesApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        Credentials: !GetAtt ImagesApiMethodRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
        RequestTemplates:
          application/json: >-
            { "TableName": "ImageDataTable2" }
        IntegrationResponses:
          - StatusCode: 200
    
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRest
      StageName: DefaultDeployment
    DependsOn:
      - BucketItemApiMethod
      - ImagesApiMethod

  DefaultApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ApiGatewayRest
      TracingEnabled: true
      DeploymentId: !Ref ApiGatewayDeployment